/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Section {
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "vehicleStandardKey")]
    pub vehicle_standard_key: String,
    /// TRUE => support connnection; FALSE => RegioJet connection
    #[serde(rename = "support")]
    pub support: bool,
    /// Codes of individuals support connection on a single route
    #[serde(rename = "supportCode", skip_serializing_if = "Option::is_none")]
    pub support_code: Option<String>,
    #[serde(rename = "vehicleType")]
    pub vehicle_type: crate::models::VehicleType,
    /// TRUE => seat reservation; FALSE => seat is chosen while boarding
    #[serde(rename = "fixedSeatReservation")]
    pub fixed_seat_reservation: bool,
    #[serde(rename = "line")]
    pub line: Box<crate::models::Line>,
    #[serde(rename = "departureStationId")]
    pub departure_station_id: i64,
    #[serde(rename = "departureStationName", skip_serializing_if = "Option::is_none")]
    pub departure_station_name: Option<String>,
    #[serde(rename = "departureCityId")]
    pub departure_city_id: i64,
    #[serde(rename = "departureCityName", skip_serializing_if = "Option::is_none")]
    pub departure_city_name: Option<String>,
    #[serde(rename = "departureTime")]
    pub departure_time: String,
    #[serde(rename = "departurePlatform", skip_serializing_if = "Option::is_none")]
    pub departure_platform: Option<String>,
    #[serde(rename = "arrivalStationId")]
    pub arrival_station_id: i64,
    #[serde(rename = "arrivalStationName", skip_serializing_if = "Option::is_none")]
    pub arrival_station_name: Option<String>,
    #[serde(rename = "arrivalCityId")]
    pub arrival_city_id: i64,
    #[serde(rename = "arrivalCityName", skip_serializing_if = "Option::is_none")]
    pub arrival_city_name: Option<String>,
    #[serde(rename = "arrivalTime")]
    pub arrival_time: String,
    #[serde(rename = "arrivalPlatform", skip_serializing_if = "Option::is_none")]
    pub arrival_platform: Option<String>,
    /// Company Id
    #[serde(rename = "carrierId", skip_serializing_if = "Option::is_none")]
    pub carrier_id: Option<i64>,
    #[serde(rename = "freeSeatsCount", skip_serializing_if = "Option::is_none")]
    pub free_seats_count: Option<i32>,
    /// Extraordinary event on route / traffic limitation
    #[serde(rename = "notices", skip_serializing_if = "Option::is_none")]
    pub notices: Option<Vec<String>>,
    /// Available services on this connection
    #[serde(rename = "services", skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
    /// Textual information about the delay on a given section
    #[serde(rename = "delay", skip_serializing_if = "Option::is_none")]
    pub delay: Option<String>,
    /// Textual information about the travel time on a given section
    #[serde(rename = "travelTime")]
    pub travel_time: String,
}

impl Section {
    pub fn new(id: i64, vehicle_standard_key: String, support: bool, vehicle_type: crate::models::VehicleType, fixed_seat_reservation: bool, line: crate::models::Line, departure_station_id: i64, departure_city_id: i64, departure_time: String, arrival_station_id: i64, arrival_city_id: i64, arrival_time: String, travel_time: String) -> Section {
        Section {
            id,
            vehicle_standard_key,
            support,
            support_code: None,
            vehicle_type,
            fixed_seat_reservation,
            line: Box::new(line),
            departure_station_id,
            departure_station_name: None,
            departure_city_id,
            departure_city_name: None,
            departure_time,
            departure_platform: None,
            arrival_station_id,
            arrival_station_name: None,
            arrival_city_id,
            arrival_city_name: None,
            arrival_time,
            arrival_platform: None,
            carrier_id: None,
            free_seats_count: None,
            notices: None,
            services: None,
            delay: None,
            travel_time,
        }
    }
}


