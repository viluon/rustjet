/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */

/// CityPair : Mozna kombinace spojeni mezi dvema mesty



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CityPair {
    /// Id mesta odjezdu
    #[serde(rename = "departureCityId")]
    pub departure_city_id: i64,
    /// Id mesta prijezdu
    #[serde(rename = "arrivalCityId")]
    pub arrival_city_id: i64,
    /// Pocet prestupu
    #[serde(rename = "numberOfTransfers")]
    pub number_of_transfers: i32,
    /// Typ spojeni mezi mesty
    #[serde(rename = "transportTypes")]
    pub transport_types: Vec<String>,
    /// IATA kody odjezdoveho mesta
    #[serde(rename = "iataCodesForDepartureCity", skip_serializing_if = "Option::is_none")]
    pub iata_codes_for_departure_city: Option<Vec<String>>,
    /// IATA kody prijezdoveho mesta
    #[serde(rename = "iataCodesForArrivalCity", skip_serializing_if = "Option::is_none")]
    pub iata_codes_for_arrival_city: Option<Vec<String>>,
}

impl CityPair {
    /// Mozna kombinace spojeni mezi dvema mesty
    pub fn new(departure_city_id: i64, arrival_city_id: i64, number_of_transfers: i32, transport_types: Vec<String>) -> CityPair {
        CityPair {
            departure_city_id,
            arrival_city_id,
            number_of_transfers,
            transport_types,
            iata_codes_for_departure_city: None,
            iata_codes_for_arrival_city: None,
        }
    }
}


