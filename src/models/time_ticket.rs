/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */

/// TimeTicket : TimeTicket



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TimeTicket {
    /// ID of the time ticket
    #[serde(rename = "id")]
    pub id: i64,
    /// Account code of the time ticket owner
    #[serde(rename = "accountCode", skip_serializing_if = "Option::is_none")]
    pub account_code: Option<i64>,
    /// ID of the station one
    #[serde(rename = "station1Id")]
    pub station1_id: i64,
    /// ID of the station two
    #[serde(rename = "station2Id")]
    pub station2_id: i64,
    /// Name of the ticket owner
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Surname of the ticket owner
    #[serde(rename = "surname", skip_serializing_if = "Option::is_none")]
    pub surname: Option<String>,
    #[serde(rename = "tariff")]
    pub tariff: Box<crate::models::Tariff>,
    #[serde(rename = "type")]
    pub _type: crate::models::TimeTicketType,
    #[serde(rename = "state")]
    pub state: crate::models::TicketState,
    #[serde(rename = "seatClass")]
    pub seat_class: Box<crate::models::SeatClass>,
    #[serde(rename = "validFrom")]
    pub valid_from: String,
    #[serde(rename = "validTo", skip_serializing_if = "Option::is_none")]
    pub valid_to: Option<String>,
    #[serde(rename = "customerActions")]
    pub customer_actions: Box<crate::models::TimeTicketCustomerAction>,
    #[serde(rename = "conditions")]
    pub conditions: Box<crate::models::PriceConditions>,
    #[serde(rename = "bills", skip_serializing_if = "Option::is_none")]
    pub bills: Option<Vec<crate::models::TimeTicketBill>>,
}

impl TimeTicket {
    /// TimeTicket
    pub fn new(id: i64, station1_id: i64, station2_id: i64, tariff: crate::models::Tariff, _type: crate::models::TimeTicketType, state: crate::models::TicketState, seat_class: crate::models::SeatClass, valid_from: String, customer_actions: crate::models::TimeTicketCustomerAction, conditions: crate::models::PriceConditions) -> TimeTicket {
        TimeTicket {
            id,
            account_code: None,
            station1_id,
            station2_id,
            name: None,
            surname: None,
            tariff: Box::new(tariff),
            _type,
            state,
            seat_class: Box::new(seat_class),
            valid_from,
            valid_to: None,
            customer_actions: Box::new(customer_actions),
            conditions: Box::new(conditions),
            bills: None,
        }
    }
}


