/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateTicketRouteRequest {
    /// route id (section0.id,section1.id, ... sectionx.id)
    #[serde(rename = "routeId")]
    pub route_id: String,
    #[serde(rename = "seatClass")]
    pub seat_class: String,
    /// Pricing ID - used for confirmation that price, services or conditions werent changed
    #[serde(rename = "priceSource")]
    pub price_source: String,
    #[serde(rename = "actionPrice", skip_serializing_if = "Option::is_none")]
    pub action_price: Option<Box<crate::models::ActionPrice>>,
    #[serde(rename = "sections")]
    pub sections: Vec<crate::models::CreateTicketSectionRequest>,
}

impl CreateTicketRouteRequest {
    pub fn new(route_id: String, seat_class: String, price_source: String, sections: Vec<crate::models::CreateTicketSectionRequest>) -> CreateTicketRouteRequest {
        CreateTicketRouteRequest {
            route_id,
            seat_class,
            price_source,
            action_price: None,
            sections,
        }
    }
}


