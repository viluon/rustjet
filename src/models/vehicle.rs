/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Vehicle {
    #[serde(rename = "vehicleId")]
    pub vehicle_id: i64,
    /// Vehicle code tag (BUS => SPZ, VAGON => code)
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "layoutURL", skip_serializing_if = "Option::is_none")]
    pub layout_url: Option<String>,
    #[serde(rename = "horizontalLayoutURL", skip_serializing_if = "Option::is_none")]
    pub horizontal_layout_url: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<crate::models::VehicleType>,
    /// Vehicle standard code tag
    #[serde(rename = "vehicleStandardKey")]
    pub vehicle_standard_key: String,
    /// Supported services icons (wifi, etc.)
    #[serde(rename = "services", skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
    #[serde(rename = "vehicleNumber")]
    pub vehicle_number: i32,
    /// Available classes in this vehicle
    #[serde(rename = "seatClasses")]
    pub seat_classes: Vec<String>,
    /// Additional informations relating to whole vehicle. These informations are visible, but wont requiring confirmation.
    #[serde(rename = "notifications", skip_serializing_if = "Option::is_none")]
    pub notifications: Option<Vec<String>>,
    #[serde(rename = "freeSeats")]
    pub free_seats: Vec<crate::models::Seat>,
}

impl Vehicle {
    pub fn new(vehicle_id: i64, vehicle_standard_key: String, vehicle_number: i32, seat_classes: Vec<String>, free_seats: Vec<crate::models::Seat>) -> Vehicle {
        Vehicle {
            vehicle_id,
            code: None,
            layout_url: None,
            horizontal_layout_url: None,
            _type: None,
            vehicle_standard_key,
            services: None,
            vehicle_number,
            seat_classes,
            notifications: None,
            free_seats,
        }
    }
}


