/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */

/// FormQuestionType : * `MULTI_COMBO` - \"Multiple available answer options\" * `TEXT` - \"Question with open answer\" * `RADIO_BUTTON` - \"Only one answer choice is available\" * `CHECKBOX` - boolean true/false * `HEADER` - \"Special type, isnt question really, contain text which we want to show customer\" 

/// * `MULTI_COMBO` - \"Multiple available answer options\" * `TEXT` - \"Question with open answer\" * `RADIO_BUTTON` - \"Only one answer choice is available\" * `CHECKBOX` - boolean true/false * `HEADER` - \"Special type, isnt question really, contain text which we want to show customer\" 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FormQuestionType {
    #[serde(rename = "MULTI_COMBO")]
    MULTICOMBO,
    #[serde(rename = "TEXT")]
    TEXT,
    #[serde(rename = "RADIO_BUTTON")]
    RADIOBUTTON,
    #[serde(rename = "CHECKBOX")]
    CHECKBOX,
    #[serde(rename = "HEADER")]
    HEADER,

}

impl ToString for FormQuestionType {
    fn to_string(&self) -> String {
        match self {
            Self::MULTICOMBO => String::from("MULTI_COMBO"),
            Self::TEXT => String::from("TEXT"),
            Self::RADIOBUTTON => String::from("RADIO_BUTTON"),
            Self::CHECKBOX => String::from("CHECKBOX"),
            Self::HEADER => String::from("HEADER"),
        }
    }
}

impl Default for FormQuestionType {
    fn default() -> FormQuestionType {
        Self::MULTICOMBO
    }
}




