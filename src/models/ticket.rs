/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */

/// Ticket : expirationDate is date-time value states when ticket expires. ExpiresAt states how many days, hours and minutes left to ticket expiration.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Ticket {
    /// ID of the ticket
    #[serde(rename = "id")]
    pub id: i64,
    /// route id (section0.id,section1.id, ... sectionx.id)
    #[serde(rename = "routeId")]
    pub route_id: String,
    /// Final price for ticket, addons and insurance etc.
    #[serde(rename = "price")]
    pub price: f32,
    /// Final price to be paid
    #[serde(rename = "unpaid")]
    pub unpaid: f32,
    #[serde(rename = "currency")]
    pub currency: crate::models::Currency,
    #[serde(rename = "state")]
    pub state: crate::models::TicketState,
    #[serde(rename = "seatClassKey")]
    pub seat_class_key: String,
    #[serde(rename = "conditions")]
    pub conditions: Box<crate::models::PriceConditions>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(rename = "expirateAt", skip_serializing_if = "Option::is_none")]
    pub expirate_at: Option<Box<crate::models::TimePeriod>>,
    #[serde(rename = "customerNotifications", skip_serializing_if = "Option::is_none")]
    pub customer_notifications: Option<Vec<String>>,
    #[serde(rename = "customerActions")]
    pub customer_actions: Box<crate::models::CustomerActions>,
    #[serde(rename = "routeSections")]
    pub route_sections: Vec<crate::models::TicketSection>,
    #[serde(rename = "addons", skip_serializing_if = "Option::is_none")]
    pub addons: Option<Vec<crate::models::OrderedAddon>>,
    /// Payment ID (groupTransactionID). Available only with paid ticket. Necessary for further action with ticket (for example: print invoice)
    #[serde(rename = "paymentId", skip_serializing_if = "Option::is_none")]
    pub payment_id: Option<i64>,
    #[serde(rename = "bills", skip_serializing_if = "Option::is_none")]
    pub bills: Option<Vec<crate::models::TicketBill>>,
    #[serde(rename = "usedCodeDiscount", skip_serializing_if = "Option::is_none")]
    pub used_code_discount: Option<Box<crate::models::CodeDiscount>>,
    /// Applied procentual discounts
    #[serde(rename = "usedPercentualDiscounts", skip_serializing_if = "Option::is_none")]
    pub used_percentual_discounts: Option<Vec<crate::models::PercentualDiscount>>,
    #[serde(rename = "transfersInfo", skip_serializing_if = "Option::is_none")]
    pub transfers_info: Option<Box<crate::models::TransfersInfo>>,
    /// Total count of all irreversible surcharges in current currency
    #[serde(rename = "surcharge", skip_serializing_if = "Option::is_none")]
    pub surcharge: Option<f32>,
    /// Total count of all charges and surcharge
    #[serde(rename = "cancelChargeSum", skip_serializing_if = "Option::is_none")]
    pub cancel_charge_sum: Option<f32>,
    /// Total count of reversible amounts
    #[serde(rename = "cancelMoneyBackSum", skip_serializing_if = "Option::is_none")]
    pub cancel_money_back_sum: Option<f32>,
    #[serde(rename = "passengersInfo")]
    pub passengers_info: Box<crate::models::PassengersInfo>,
    /// Textual information about the first delay on the route
    #[serde(rename = "delay", skip_serializing_if = "Option::is_none")]
    pub delay: Option<String>,
    /// Textual information about the travel time on a given section
    #[serde(rename = "travelTime", skip_serializing_if = "Option::is_none")]
    pub travel_time: Option<String>,
    /// Estimated arrival date time (arrival + delay)
    #[serde(rename = "estimatedArrivalTime", skip_serializing_if = "Option::is_none")]
    pub estimated_arrival_time: Option<String>,
}

impl Ticket {
    /// expirationDate is date-time value states when ticket expires. ExpiresAt states how many days, hours and minutes left to ticket expiration.
    pub fn new(id: i64, route_id: String, price: f32, unpaid: f32, currency: crate::models::Currency, state: crate::models::TicketState, seat_class_key: String, conditions: crate::models::PriceConditions, customer_actions: crate::models::CustomerActions, route_sections: Vec<crate::models::TicketSection>, passengers_info: crate::models::PassengersInfo) -> Ticket {
        Ticket {
            id,
            route_id,
            price,
            unpaid,
            currency,
            state,
            seat_class_key,
            conditions: Box::new(conditions),
            expiration_date: None,
            expirate_at: None,
            customer_notifications: None,
            customer_actions: Box::new(customer_actions),
            route_sections,
            addons: None,
            payment_id: None,
            bills: None,
            used_code_discount: None,
            used_percentual_discounts: None,
            transfers_info: None,
            surcharge: None,
            cancel_charge_sum: None,
            cancel_money_back_sum: None,
            passengers_info: Box::new(passengers_info),
            delay: None,
            travel_time: None,
            estimated_arrival_time: None,
        }
    }
}


