/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PriceClass {
    /// Enum.name
    #[serde(rename = "seatClassKey")]
    pub seat_class_key: String,
    #[serde(rename = "conditions")]
    pub conditions: Box<crate::models::PriceConditions>,
    /// Services icons (wifi, etc.)
    #[serde(rename = "services")]
    pub services: Vec<String>,
    #[serde(rename = "freeSeatsCount")]
    pub free_seats_count: i32,
    #[serde(rename = "price")]
    pub price: f32,
    #[serde(rename = "creditPrice")]
    pub credit_price: f32,
    /// Pricing ID - used for price, services or terms confirmation after route search
    #[serde(rename = "priceSource")]
    pub price_source: String,
    /// Customer notifications
    #[serde(rename = "customerNotifications")]
    pub customer_notifications: Vec<String>,
    #[serde(rename = "actionPrice", skip_serializing_if = "Option::is_none")]
    pub action_price: Option<Box<crate::models::ActionPrice>>,
    #[serde(rename = "tariffs")]
    pub tariffs: Vec<String>,
    #[serde(rename = "tariffNotifications", skip_serializing_if = "Option::is_none")]
    pub tariff_notifications: Option<Box<crate::models::TariffNotifications>>,
    /// There are free seats in class for reservation if TRUE otherwise FALSE
    #[serde(rename = "bookable")]
    pub bookable: bool,
}

impl PriceClass {
    pub fn new(seat_class_key: String, conditions: crate::models::PriceConditions, services: Vec<String>, free_seats_count: i32, price: f32, credit_price: f32, price_source: String, customer_notifications: Vec<String>, tariffs: Vec<String>, bookable: bool) -> PriceClass {
        PriceClass {
            seat_class_key,
            conditions: Box::new(conditions),
            services,
            free_seats_count,
            price,
            credit_price,
            price_source,
            customer_notifications,
            action_price: None,
            tariffs,
            tariff_notifications: None,
            bookable,
        }
    }
}


