/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ArrivalDepartureConnection {
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    /// Information about the delay in minutes on a given connection
    #[serde(rename = "delay", skip_serializing_if = "Option::is_none")]
    pub delay: Option<i32>,
    #[serde(rename = "virtual", skip_serializing_if = "Option::is_none")]
    pub _virtual: Option<bool>,
    #[serde(rename = "vehicleCategory", skip_serializing_if = "Option::is_none")]
    pub vehicle_category: Option<VehicleCategory>,
    #[serde(rename = "freeSeatsCount", skip_serializing_if = "Option::is_none")]
    pub free_seats_count: Option<i32>,
    /// Individual stations (including metadata) sort according to order which connection builds.
    #[serde(rename = "connectionStations", skip_serializing_if = "Option::is_none")]
    pub connection_stations: Option<Vec<crate::models::ArrivalDepartureConnectionStation>>,
}

impl ArrivalDepartureConnection {
    pub fn new() -> ArrivalDepartureConnection {
        ArrivalDepartureConnection {
            label: None,
            number: None,
            delay: None,
            _virtual: None,
            vehicle_category: None,
            free_seats_count: None,
            connection_stations: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VehicleCategory {
    #[serde(rename = "COACH")]
    COACH,
    #[serde(rename = "AIRCRAFT")]
    AIRCRAFT,
    #[serde(rename = "RAIL_CAR")]
    RAILCAR,
}

impl Default for VehicleCategory {
    fn default() -> VehicleCategory {
        Self::COACH
    }
}

