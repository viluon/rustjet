/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Route {
    /// {section0.id},{section1.id}, ... 
    #[serde(rename = "id")]
    pub id: String,
    /// Major part of the route. Only for this section can customer select Class or Standard.
    #[serde(rename = "mainSectionId")]
    pub main_section_id: i64,
    #[serde(rename = "departureStationId")]
    pub departure_station_id: i64,
    #[serde(rename = "departureStationName", skip_serializing_if = "Option::is_none")]
    pub departure_station_name: Option<String>,
    #[serde(rename = "departureCityId")]
    pub departure_city_id: i64,
    #[serde(rename = "departureCityName", skip_serializing_if = "Option::is_none")]
    pub departure_city_name: Option<String>,
    #[serde(rename = "departureTime")]
    pub departure_time: String,
    #[serde(rename = "arrivalStationId")]
    pub arrival_station_id: i64,
    #[serde(rename = "arrivalStationName", skip_serializing_if = "Option::is_none")]
    pub arrival_station_name: Option<String>,
    #[serde(rename = "arrivalCityId")]
    pub arrival_city_id: i64,
    #[serde(rename = "arrivalCityName", skip_serializing_if = "Option::is_none")]
    pub arrival_city_name: Option<String>,
    #[serde(rename = "arrivalTime")]
    pub arrival_time: String,
    /// Returns smallest number of available free seats through all sections
    #[serde(rename = "freeSeatsCount")]
    pub free_seats_count: i32,
    #[serde(rename = "priceFrom", skip_serializing_if = "Option::is_none")]
    pub price_from: Option<f32>,
    #[serde(rename = "priceTo", skip_serializing_if = "Option::is_none")]
    pub price_to: Option<f32>,
    #[serde(rename = "creditPriceFrom", skip_serializing_if = "Option::is_none")]
    pub credit_price_from: Option<f32>,
    #[serde(rename = "creditPriceTo", skip_serializing_if = "Option::is_none")]
    pub credit_price_to: Option<f32>,
    #[serde(rename = "vehicleTypes", skip_serializing_if = "Option::is_none")]
    pub vehicle_types: Option<Vec<crate::models::VehicleType>>,
    #[serde(rename = "priceClasses", skip_serializing_if = "Option::is_none")]
    pub price_classes: Option<Vec<crate::models::PriceClass>>,
    #[serde(rename = "surcharge", skip_serializing_if = "Option::is_none")]
    pub surcharge: Option<Box<crate::models::Surcharge>>,
    #[serde(rename = "sections")]
    pub sections: Vec<crate::models::Section>,
    /// Notice of any extraordinarily events on route / traffic limitation
    #[serde(rename = "notices", skip_serializing_if = "Option::is_none")]
    pub notices: Option<bool>,
    #[serde(rename = "transfersInfo", skip_serializing_if = "Option::is_none")]
    pub transfers_info: Option<Box<crate::models::TransfersInfo>>,
    /// TRUE => national, FALSE => international
    #[serde(rename = "nationalTrip", skip_serializing_if = "Option::is_none")]
    pub national_trip: Option<bool>,
    /// TRUE if at least one class have enough free seats for reservation, otherwise FALSE
    #[serde(rename = "bookable")]
    pub bookable: bool,
    /// Textual information about the first delay on the route
    #[serde(rename = "delay", skip_serializing_if = "Option::is_none")]
    pub delay: Option<String>,
    /// Textual information about the travel time on the route
    #[serde(rename = "travelTime", skip_serializing_if = "Option::is_none")]
    pub travel_time: Option<String>,
}

impl Route {
    pub fn new(id: String, main_section_id: i64, departure_station_id: i64, departure_city_id: i64, departure_time: String, arrival_station_id: i64, arrival_city_id: i64, arrival_time: String, free_seats_count: i32, sections: Vec<crate::models::Section>, bookable: bool) -> Route {
        Route {
            id,
            main_section_id,
            departure_station_id,
            departure_station_name: None,
            departure_city_id,
            departure_city_name: None,
            departure_time,
            arrival_station_id,
            arrival_station_name: None,
            arrival_city_id,
            arrival_city_name: None,
            arrival_time,
            free_seats_count,
            price_from: None,
            price_to: None,
            credit_price_from: None,
            credit_price_to: None,
            vehicle_types: None,
            price_classes: None,
            surcharge: None,
            sections,
            notices: None,
            transfers_info: None,
            national_trip: None,
            bookable,
            delay: None,
            travel_time: None,
        }
    }
}


