/*
 * RegioJet API
 *
 * A set of endpoints to interact with RegioJet transport services. Search for connections, book tickets, see the list of served stations and more. All endpoints consume and produce JSON strings, with the exception of ticket printing (/tickets/{ticketId}/print) that produce printable HTML code.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@studentagency.cz
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PriceConditions {
    /// Control MD5 hash transformed from conditions content (used for current terms visibility check)
    #[serde(rename = "code")]
    pub code: String,
    #[serde(rename = "descriptions")]
    pub descriptions: Box<crate::models::PriceConditionsDescriptions>,
    /// States that if its possible to refund money to origin money source
    #[serde(rename = "refundToOriginalSourcePossible", skip_serializing_if = "Option::is_none")]
    pub refund_to_original_source_possible: Option<bool>,
    /// Total count of all cancel charges in current currency
    #[serde(rename = "cancelCharge", skip_serializing_if = "Option::is_none")]
    pub cancel_charge: Option<f32>,
    #[serde(rename = "cancelCharges", skip_serializing_if = "Option::is_none")]
    pub cancel_charges: Option<Vec<crate::models::CancelCharge>>,
}

impl PriceConditions {
    pub fn new(code: String, descriptions: crate::models::PriceConditionsDescriptions) -> PriceConditions {
        PriceConditions {
            code,
            descriptions: Box::new(descriptions),
            refund_to_original_source_possible: None,
            cancel_charge: None,
            cancel_charges: None,
        }
    }
}


